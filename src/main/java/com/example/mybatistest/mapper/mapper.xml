<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mybatistest.mybatisinsert.MybatisInserDao">

    <insert id="insert" parameterType="java.util.List">
        insert into
            fcmtest(
                    idx, content, link_addr, member_id, org_code, notice_code, title, service_key
                    )
        values
            <foreach collection="list" item="receiver" separator=",">
                (
                    #{receiver.idx},
                    #{receiver.content},
                    #{receiver.member_id},
                    #{receiver.link_addr},
                    #{receiver.org_code},
                    #{receiver.notice_code},
                    #{receiver.title},
                    #{receiver.service_key}
                )
            </foreach>
    </insert>

    <delete id="delete" >
        delete from fcmtest
    </delete>

    <select id="select" resultType="com.example.mybatistest.mybatisinsert.Allim">
        SELECT
                notice_code, org_code, title, content,
                add_date, receive_agree
        FROM
                notice
    </select>

    <select id="findMembers" resultType="com.example.mybatistest.mybatisinsert.Allim" parameterType="com.example.mybatistest.mybatisinsert.Allim">
      SELECT
            a.title, a.content, a.add_date, a.receive_agree,
            b.member_id, b.device_code, b.token, b.member_name, b.link_addr, b.org_code, b.notice_code
        FROM
            notice a INNER JOIN member b
        WHERE
            a.org_code = b.org_code
          AND b.org_code = #{org_code}
          <if test="notice_code != null">
          AND b.notice_code = #{notice_code}
          </if>
    </select>

  <select id="listToJson" resultType="com.example.mybatistest.mybatisinsert.Member" parameterType="com.example.mybatistest.mybatisinsert.Allim">
    select
        *
    from testtable
  </select>

  <insert id="fcmJsonInsertGubun" parameterType="map">
        insert into TAP_MN_PUSH_GUBUN(
                mbr_id, push_seq, sys_nm, sys_id, bbs_id, push_yn, creat_dt
                )
        values
            (
                #{mbr_id},
                #{push_seq},
                #{sys_nm},
                #{sys_id},
                #{bbs_id},
                'N',
                sysdate
            )

  </insert>

  <insert id="fcmInsertUser" parameterType="map">
    insert into TAP_MN_PUSH_USER(
      mbr_token, mbr_id, mbr_nm, creat_dt
    )
    values
      (
        #{mbr_token},
        #{mbr_id},
        #{mbr_nm},
        '1'
      )

  </insert>

  <insert id="fcmInsertPost" parameterType="com.example.mybatistest.mybatisinsert.Member">
    insert into TAP_MN_PUSH_USER(
      mbr_token, mbr_id, mbr_nm, creat_dt
    )
    VALUES
      (
        #{mbr_token},
        #{mbr_id},
        #{mbr_nm},
        sysdate()
      )

  </insert>

  <update id="fcmUpdatePost" parameterType="com.example.mybatistest.mybatisinsert.Member">
    UPDATE
        TAP_MN_PUSH_USER
    SET
        mbr_id = #{mbr_id}, mbr_nm =#{mbr_nm}
    WHERE
        mbr_token = #{mbr_token}
  </update>
  
  <update id="fcmDuplicatedTokenUpdate" parameterType="com.example.mybatistest.mybatisinsert.Member">
    UPDATE
      TAP_MN_PUSH_USER
    SET
       creat_dt = sysdate(), usage_status = 'N'
    WHERE
      mbr_token = #{old_token}
  </update>

  <insert id="fcmGubunInsert" parameterType="com.example.mybatistest.mybatisinsert.Member">

    <selectKey resultType="int" keyProperty="push_seq" order="BEFORE">
      SELECT
         IFNULL(MAX(push_seq),0)+1
--       Oracle -  NVL(MAX(push_seq),0)+1
      FROM
          tap_mn_push_gubun
      where mbr_token = #{mbr_token}
    </selectKey>

    insert into
        TAP_MN_PUSH_GUBUN
        (mbr_token, push_seq, sys_id, bbs_id, push_yn, creat_dt)
    VALUES
      (
        #{mbr_token},
        #{push_seq},
        #{sys_id},
        #{bbs_id},
        #{push_yn},
        sysdate()
      )
  </insert>

  <select id="fcmListMember" resultType="com.example.mybatistest.mybatisinsert.Member">
    SELECT
      a.mbr_token,c.push_sj, c.push_nm, c.link, c.push_sttus
    FROM
      tap_mn_push_user a, tap_mn_push_gubun b, tap_mn_push_manage c
    WHERE
      a.mbr_token = b.mbr_token
      AND b.sys_id = c.sys_id
      AND b.bbs_id = c.bbs_id
      AND b.push_yn = 'Y'

  </select>

  <insert id="realInsert" parameterType="java.util.List">
    INSERT INTO
         TAP_MN_FCM(
                    mbr_token, push_sj, push_nm, link, push_sttus
                    )
    VALUES
        <foreach collection="list" item="item" separator=",">
          (
            #{item.mbr_token},
            #{item.push_sj},
            #{item.push_nm},
            #{item.link},
           'N'
          )
    </foreach>
  </insert>

  <delete id="fcmDeleteGubun" parameterType="com.example.mybatistest.mybatisinsert.Member">
    DELETE FROM
        TAP_MN_PUSH_GUBUN
    WHERE
        mbr_token = #{mbr_token}
  </delete>
  
  <select id="fcmSelectSys" resultType="com.example.mybatistest.mybatisinsert.Member">
    SELECT
        a.sys_id, a.sys_nm, b.bbs_sj, b.bbs_id
    FROM
         dgedu_user.tap_sm_sys_manage a, dgedu_user.tap_bm_bbs_manage b
    WHERE
        a.sys_ty = 'INSTT'
      AND a.sys_id = b.sys_id
      AND a.sys_nm LIKE CONCAT('%',#{sys_nm},'%')
      AND b.bbs_sj LIKE '알림마당-공지사항%'
    ORDER BY b.bbs_id
  </select>

  <select id="fcmPushList" parameterType="com.example.mybatistest.mybatisinsert.Member" resultType="com.example.mybatistest.mybatisinsert.Member">
  SELECT
      *
  FROM
      tap_mn_fcm
  </select>

  <delete id="deleteFcmPushList" parameterType="String">
    DELETE FROM
        tap_mn_fcm
    WHERE
        mbr_token = #{mbr_token}
  </delete>
</mapper>